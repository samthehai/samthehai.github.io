<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Hai Sam&#39;s Blog</title>
    <link>https://samthehai.github.io/tags/programming/</link>
    <description>Recent content in Programming on Hai Sam&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://samthehai.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Design pattern: Creational Pattern - Abstract Factory</title>
      <link>https://samthehai.github.io/posts/design_pattern_creational_pattern_abstract_factory/</link>
      <pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://samthehai.github.io/posts/design_pattern_creational_pattern_abstract_factory/</guid>
      <description>Nguồn tham khảo </description>
    </item>
    
    <item>
      <title>Thuật toán cơ bản: Quicksort trong practice hay là Introsort</title>
      <link>https://samthehai.github.io/posts/basic_algorithm_quicksort/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://samthehai.github.io/posts/basic_algorithm_quicksort/</guid>
      <description>1. Giới thiệu Tuần này ta sẽ tìm hiểu về thuật toán Quicksort, một thuật toán sắp xếp nổi tiếng là nhanh. Ta sẽ thử tìm hiểu xem Quicksort nhanh đến cỡ nào, và nó có phải là thuật toán sắp xếp nhanh nhất hiện tại hay không?
Tất nhiên trước hết ta sẽ đi qua tìm hiểu thuật toán bên dưới của Quicksort. Giả sử ta có một danh sách các phần tử, thuật toán Quicksort sẽ bao gồm các bước dưới đây:</description>
    </item>
    
    <item>
      <title>Cấu trúc dữ liệu cơ bản: Array và Linked List</title>
      <link>https://samthehai.github.io/posts/basic_datastructure_array_and_linked_list/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://samthehai.github.io/posts/basic_datastructure_array_and_linked_list/</guid>
      <description>1. Giới thiệu 1.1. Contiguous vs Linked Data Structures Cấu trúc dữ liệu có thể được phân loại thành hai phần: contiguous (liên tục) hoặc linked (liên kết) tuỳ thuộc vào việc chúng đang dựa vào array (mảng) hay là pointer (con trỏ):
 Contiguously-allocated structures bao gồm nhiều block memory liên tiếp nhau, gồm có: arrays, matrices, heaps, và hash tables. Linked data structures bao gồm những mảnh memory khác nhau được kết nối với nhau bởi pointer, gồm có: lists, trees, và graph adjacency lists  1.</description>
    </item>
    
    <item>
      <title>Cấu trúc dữ liệu trong Go: Interfaces</title>
      <link>https://samthehai.github.io/posts/go_data_structures_interfaces/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://samthehai.github.io/posts/go_data_structures_interfaces/</guid>
      <description>1. Giới thiệu Interfaces của Go - là static, được kiểm tra lúc compile, dynamic khi cần thiết- theo tôi là phần thú vị nhất của Go theo góc nhìn thiết kế. Nếu có thể chọn một feature để export sang ngôn ngữ khác tôi sẽ chọn interface.
Bài viết này là quan điểm của tôi khi hiện thực giá trị interface trong các trình biên dịc &amp;ldquo;gc&amp;rdquo;: 6g, 8g, và 5g.</description>
    </item>
    
    <item>
      <title>Reflection trong Go</title>
      <link>https://samthehai.github.io/posts/reflection_in_go/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://samthehai.github.io/posts/reflection_in_go/</guid>
      <description>1. Giới thiệu Go cung cấp một cơ chế dể cập nhật biến, và kiểm tra giá trị của nó lúc runtime, để gọi hàm,&amp;hellip; mà không cần biết về kiểu dữ liệu của nó lúc biên dịch. Cơ chế này gọi là reflection. Ta có thể xem định nghĩa về reflection trên Wikipedia
 In computer science, reflection programming is the ability of a process to examine, introspect, and modify its own structure and behavior.</description>
    </item>
    
    <item>
      <title>React.js dành cho dân lập trình Vue.js</title>
      <link>https://samthehai.github.io/posts/react_for_vue_developer_translation/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://samthehai.github.io/posts/react_for_vue_developer_translation/</guid>
      <description>1. Giới thiệu Đang học React.js để áp dụng cho các dự án đang làm thì bí stuck một số chỗ. Nhân tiện kiếm được trên mạng một tài liệu mình thấy hay giới thiệu về React cho những ai đã có nền tảng Vue.js Mình lược dịch lại tài liệu này sang Tiếng Việt như một cách để active learning luôn.
Table of contents  Templates Props Data Computed properties Methods Events Lifecycle methods Watchers Slots &amp;amp; scoped slots Provide / inject Custom directives Transitions  2.</description>
    </item>
    
    <item>
      <title>Thuật toán thực hành: AI cho tic tac toe game</title>
      <link>https://samthehai.github.io/posts/tic_tac_toe_ai_algorithm/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://samthehai.github.io/posts/tic_tac_toe_ai_algorithm/</guid>
      <description>1. Giới thiệu Nguồn tham khảo </description>
    </item>
    
    <item>
      <title>Thuật toán cơ bản: phân tích độ phức tạp giải thuật</title>
      <link>https://samthehai.github.io/posts/basic_algorithm/</link>
      <pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://samthehai.github.io/posts/basic_algorithm/</guid>
      <description>1. Giới thiệu Đối với một người làm về khoa học máy tính, thuật toán chắc chắn phải là một trong những khái niệm đầu tiên phải học.
Vậy thì thuật toán là gi?
Một thuật toán là một quá trình để thực hiện một task, thuật toán là ý tưởng bên trong của bất kì chương trình máy tính nghiêm chỉnh nào.
Ta có thể nói một thuật toán thì sẽ phải giải quyết một vấn đề nào đó và để giải quyết một vấn đề có thể có nhiều thuật toán khác nhau.</description>
    </item>
    
    <item>
      <title>Thuật toán cơ bản: phân tích độ phức tạp giải thuật</title>
      <link>https://samthehai.github.io/posts/basic_datastructure_skiplist/</link>
      <pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://samthehai.github.io/posts/basic_datastructure_skiplist/</guid>
      <description>1. Giới thiệu Như ta đã biết ưu điểm của linked list so với array là ta có thể thêm và xoá node một cách linh hoạt và ít tốn kém hơn. Tuy nhiên độ phức tạp khi tìm kiếm và insert dữ liệu vào linked list trong trường hợp worst case là O(n). Vậy có cách nào cải thiện được vấn đề này ở linked list không? Câu trả lời là ta có thể đạt được kết quả tốt hơn ở một linked list đã sắp xếp nêú sử dụng skiplist.</description>
    </item>
    
    <item>
      <title>Giới thiệu về Testing trong Go</title>
      <link>https://samthehai.github.io/posts/testing_in_go/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://samthehai.github.io/posts/testing_in_go/</guid>
      <description>Giới thiệu Testing là một quá trình quan trọng trong mọi ngành sản xuất từ việc trồng trọt:lựa chọn giống, phương pháp sản xuất đến công việc sản xuất các thiết bị, hệ thống cực lớn trong các ngành công ngiệp. Chẳng thế mà người đảm nhận vị trí Quality assurancce (QA) luôn có một quyền lực rất lớn trong các công ty sản xuất công ngiệp. Và ngành công nghiệp sản xuất phầm mềm hiển nhiên là cũng không ngoại lệ.</description>
    </item>
    
    <item>
      <title>Golang dành cho dân lập trình C</title>
      <link>https://samthehai.github.io/posts/go_for_c_programmers/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://samthehai.github.io/posts/go_for_c_programmers/</guid>
      <description>1. Giới thiệu về Go 1.1. Động lực    Hiện tại đang có Muốn Golang     Code khó hiểu và không an toàn Dễ đọc, code an toàn và hiệu quả Nhỏ gọn mà biểu diễn tốt   Build code siêu chậm Một hệ thống có thể mở rộng (scale) Kiểu dữ liệu tĩnh (statically) và có hỗ trợ thu dọn rác (garbage collected)   Không có hỗ trợ lập trình đồng bộ Hỗ trợ lập trình đồng bộ tốt Đối tượng nhưng không định hướng kiểu (type - oriented)   Tools cũ kĩ Những Tools mà có thể hoạt động tại những hệ thống lớn như Google Hỗ trợ lập trình đồng bộ tốt     Hiện thực hiệu quả     Thư viện chuẩn phong phú     Biên dịch nhanh     Tools có thể mở rộng được    1.</description>
    </item>
    
  </channel>
</rss>
