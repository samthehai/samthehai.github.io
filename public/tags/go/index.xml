<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Hai Sam&#39;s Blog</title>
    <link>https://samthehai.github.io/tags/go/</link>
    <description>Recent content in Go on Hai Sam&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Copyright notice</copyright>
    <lastBuildDate>Sun, 27 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://samthehai.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cấu trúc dữ liệu trong Go: Interfaces</title>
      <link>https://samthehai.github.io/posts/go_data_structures_interfaces/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://samthehai.github.io/posts/go_data_structures_interfaces/</guid>
      <description>1. Giới thiệu Interfaces của Go - là static, được kiểm tra lúc compile, dynamic khi cần thiết- theo tôi là phần thú vị nhất của Go theo góc nhìn thiết kế. Nếu có thể chọn một feature để export sang ngôn ngữ khác tôi sẽ chọn interface.
Bài viết này là quan điểm của tôi khi hiện thực giá trị interface trong các trình biên dịc &amp;ldquo;gc&amp;rdquo;: 6g, 8g, và 5g.</description>
    </item>
    
    <item>
      <title>Reflection trong Go</title>
      <link>https://samthehai.github.io/posts/reflection_in_go/</link>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://samthehai.github.io/posts/reflection_in_go/</guid>
      <description>1. Giới thiệu Go cung cấp một cơ chế dể cập nhật biến, và kiểm tra giá trị của nó lúc runtime, để gọi hàm,&amp;hellip; mà không cần biết về kiểu dữ liệu của nó lúc biên dịch. Cơ chế này gọi là reflection. Ta có thể xem định nghĩa về reflection trên Wikipedia
 In computer science, reflection programming is the ability of a process to examine, introspect, and modify its own structure and behavior.</description>
    </item>
    
    <item>
      <title>Giới thiệu về Testing trong Go</title>
      <link>https://samthehai.github.io/posts/testing_in_go/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://samthehai.github.io/posts/testing_in_go/</guid>
      <description>Giới thiệu Testing là một quá trình quan trọng trong mọi ngành sản xuất từ việc trồng trọt:lựa chọn giống, phương pháp sản xuất đến công việc sản xuất các thiết bị, hệ thống cực lớn trong các ngành công ngiệp. Chẳng thế mà người đảm nhận vị trí Quality assurancce (QA) luôn có một quyền lực rất lớn trong các công ty sản xuất công ngiệp. Và ngành công nghiệp sản xuất phầm mềm hiển nhiên là cũng không ngoại lệ.</description>
    </item>
    
    <item>
      <title>Golang dành cho dân lập trình C</title>
      <link>https://samthehai.github.io/posts/go_for_c_programmers/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://samthehai.github.io/posts/go_for_c_programmers/</guid>
      <description>1. Giới thiệu về Go 1.1. Động lực    Hiện tại đang có Muốn Golang     Code khó hiểu và không an toàn Dễ đọc, code an toàn và hiệu quả Nhỏ gọn mà biểu diễn tốt   Build code siêu chậm Một hệ thống có thể mở rộng (scale) Kiểu dữ liệu tĩnh (statically) và có hỗ trợ thu dọn rác (garbage collected)   Không có hỗ trợ lập trình đồng bộ Hỗ trợ lập trình đồng bộ tốt Đối tượng nhưng không định hướng kiểu (type - oriented)   Tools cũ kĩ Những Tools mà có thể hoạt động tại những hệ thống lớn như Google Hỗ trợ lập trình đồng bộ tốt     Hiện thực hiệu quả     Thư viện chuẩn phong phú     Biên dịch nhanh     Tools có thể mở rộng được    1.</description>
    </item>
    
  </channel>
</rss>
